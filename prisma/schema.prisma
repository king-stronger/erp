// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  revenues       Revenue[]
  expenses       Expense[]
  stockMovements StockMovement[]
}

enum Categories {
  EXPENSE @map("expense")
  REVENUE @map("revenue")
  PRODUCT @map("product")
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  type      Categories // Détermine si la catégorie est liée à une dépense ou une recette
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  revenues Revenue[]
  expenses Expense[]
  products Product[]
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  name      String // Nom du mode de paiement (ex: espèces, mobile money...)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  revenues Revenue[]
  expenses Expense[]
}

model Revenue {
  id              Int           @id @default(autoincrement())
  amount          Float // Montant de la recette
  date            DateTime // Date à laquelle la recette a été réalisée
  description     String?
  categoryId      Int
  category        Category      @relation(fields: [categoryId], references: [id])
  paymentMethodId Int
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  createdById     Int
  createdBy       User          @relation(fields: [createdById], references: [id])
  createdAt       DateTime      @default(now())
  updated         DateTime      @updatedAt
}

model Expense {
  id              Int           @id @default(autoincrement())
  amount          Float // Montant de la dépense
  date            DateTime // Date de la dépense
  description     String?
  categoryId      Int
  category        Category      @relation(fields: [categoryId], references: [id])
  paymentMethodId Int
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  createdById     Int
  createdBy       User          @relation(fields: [createdById], references: [id])
  createdAt       DateTime      @default(now())
  updated         DateTime      @updatedAt
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String // Nom du produit
  description   String?
  unit          String // Unité de mesure (ex: kg, litre...)
  priceUnit     Float? // Prix de vente unitaire conseillé
  initialStock  Float    @default(0) // Stock de départ lors de la création
  alertTreshold Float    @default(0) // Seuil d'alerte pour les stocks faibles
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  stockMovements StockMovement[]
}

enum StockMovementSource {
  ACHAT         @map("achat") // Achat d'un produit
  VENTE         @map("vente") // Vente d'un produit
  PERTE         @map("perte") // Perte ou casse
  DON           @map("don") // Don reçu ou offert
  INVENTAIRE    @map("inventaire") // Ajustement suite à inventaire
  RETOUR_CLIENT @map("retour_client") // Produit retourné par un client
}

model StockMovement {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  movementType String // Type de mouvement: "in", "out"
  quantity     Float // Quantité du mouvement
  reason       String? // Explication facultative
  source       StockMovementSource // Origine du mouvement
  date         DateTime // Date du mouvement

  createdBy   User @relation(fields: [createdById], references: [id])
  createdById Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
